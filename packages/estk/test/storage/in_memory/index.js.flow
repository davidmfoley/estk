'use strict';

var _before_all_event = require('../before_all_event');

var _before_all_event2 = _interopRequireDefault(_before_all_event);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var timestamps = require('../timestamps');

var nextId = 0;

module.exports = function () {
  var events = [_before_all_event2.default];

  function publish(_ref) {
    var data = _ref.data,
        meta = _ref.meta,
        targetId = _ref.targetId,
        targetType = _ref.targetType,
        action = _ref.action;

    nextId++;

    var event = {
      id: nextId,
      timestamp: timestamps.now(),
      action: action,
      data: data,
      meta: meta || {},
      targetId: targetId,
      targetType: targetType
    };

    events.push(event);

    return Promise.resolve(event);
  }

  function getEventStream(lookup) {
    var lookupFilter = filterEvents.bind(null, lookup || {});
    var index = 0;

    function next() {
      while (index < events.length && !lookupFilter(events[index])) {
        index++;
      }
      var resolved = Promise.resolve(events[index] || null);
      index++;
      return resolved;
    }

    function seek(bookmark) {
      while (isBeforeBookmark(bookmark, events[0])) {
        index++;
      }
    }

    return Promise.resolve({
      next: next,
      seek: seek
    });
  }

  function isBeforeBookmark(bookmark, event) {
    return bookmark.timestamp > event.timestamp || bookmark.id && bookmark.timestamp === event.timestamp && bookmark.id <= event.id;
  }

  function filterEvents(lookup, event) {
    var filter = lookup.filter,
        bookmark = lookup.bookmark;


    if (!filter) return true;

    var timestamp = bookmark ? bookmark.timestamp : null;
    if (bookmark && isBeforeBookmark(bookmark, event)) return true;

    if (event.action === _before_all_event2.default.action) {
      return !timestamp;
    }

    var spec = filter[event.targetType];
    if (!spec) return false;

    var action = spec.action || '';

    if (spec.id) {
      if (!isMatch(spec.id, event.targetId)) return false;
    }
    if (action) {
      if (!isMatch(action, event.action)) return false;
    }
    return true;
  }

  function isMatch(arrayOrSingle, value) {
    if (Array.isArray(arrayOrSingle)) return arrayOrSingle.indexOf(value) > -1;
    return arrayOrSingle === value;
  }

  function close() {
    return Promise.resolve();
  }

  return {
    publish: publish, getEventStream: getEventStream, close: close
  };
};